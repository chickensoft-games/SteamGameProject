<Project Sdk="Godot.NET.Sdk/4.0.1-rc.2">
  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <EnableDynamicLoading>true</EnableDynamicLoading>
    <RootNamespace>SteamGameProject</RootNamespace>
    <LangVersion>10.0</LangVersion>
    <Nullable>enable</Nullable>
    <!-- Required for some nuget packages to work -->
    <!-- godotengine/godot/issues/42271#issuecomment-751423827 -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <!-- For Steamworks.NET:
    <PlatformTarget>x64</PlatformTarget> -->
    <!-- To show generated files -->
    <!-- <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
    <CompilerGeneratedFilesOutputPath>.generated</CompilerGeneratedFilesOutputPath> -->
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <Title>SteamGameProject</Title>
    <Version>1.0.0</Version>
    <Description />
    <Copyright>© 2023 Chickensoft</Copyright>
    <Authors>Chickensoft</Authors>
    <Company>Chickensoft</Company>
    <!-- Don't include unit tests in release builds. -->
    <DefaultItemExcludes Condition="'$(Configuration)' == 'ExportRelease'">
      $(DefaultItemExcludes);test/**/*
    </DefaultItemExcludes>
  </PropertyGroup>
  <ItemGroup>
    <!-- Dependencies go here! -->
  </ItemGroup>
  <ItemGroup Condition="'$(Configuration)' == 'Debug'">
    <!-- Packages used by tests — these are only included in debug builds. -->
    <PackageReference Include="Chickensoft.GoDotTest" Version="1.1.2-beta.4.0.0.17" />
    <!-- Bring your own assertion library for tests! -->
    <!-- We're using Shouldly for this example, but you can use anything. -->
    <PackageReference Include="Shouldly" Version="4.1.0" />
    <!-- LightMock is a mocking library that can run without reflection. -->
    <PackageReference Include="LightMock.Generator" Version="1.2.2" />
    <!-- LightMoq is a Chickensoft package which makes it more like Moq. -->
    <PackageReference Include="LightMoq" Version="0.1.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- https://jeremybytes.blogspot.com/2020/05/cross-platform-build-events-in-net-core.html -->
    <!-- Also, see README in solution directory. -->

    <!-- Steamworks.NET -->
    <Reference Include="Steamworks.NET, Version=2.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <Link>Steamworks.NET.dll</Link>
      <HintPath Condition=" '$(OS)' == 'Windows_NT' ">Steamworks/Windows-x64/Steamworks.NET.dll</HintPath>
      <HintPath Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))'">Steamworks/OSX-Linux-x64/Steamworks.NET.dll</HintPath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Reference>

    <Content Include="Steamworks/Windows-x64/steam_api64.dll" Condition=" '$(OS)' == 'Windows_NT' ">
      <Link>steam_api64.dll</Link>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>

    <Content Include="Steamworks/OSX-Linux-x64/steam_api.bundle/Contents/MacOS/libsteam_api.dylib" Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))'">
      <Link>libsteam_api.dylib</Link>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- /Steamworks.NET -->
  </ItemGroup>
</Project>
